@page "/Todos"
@using ToDoTutorial.Data
@using ToDoTutorial.Models
@inject ITodoService CloudTodoService

<h1>TodoList</h1>

<p>
    Filter by User Id: <input type="number" @bind="filterById" style="width:50px" />
</p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" @bind="filterByCompleted" style="width:100px">
        <option>Both</option>
        <option>false</option>
        <option>true</option>
    </select>
</p>

<p class="action">
    <button class="btn btn-outline-dark" type="submit" @onclick="loadTodosByFilter">Load Todos</button>
</p>


@if (todosToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!todosToShow.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>Todo ID</th>
                <th>Title</th>
                <th>Completed?</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in todosToShow)
            {
                <tr>
                    <td>@item.UserId</td>
                    <td>@item.TodoId</td>
                    <td>@item.Title</td>
                    <td>
                        <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg, item))" />
                    </td>
                    <td>
                        <button @onclick="@(() => RemoveTodo(item.TodoId))">
                            <i class="oi oi-trash" style="color:red" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Todo> todosToShow;
    private IList<Todo> allTodos;

    private int filterById;
    private string filterByCompleted;


    public async Task loadTodosByFilter()
    {
        allTodos = await CloudTodoService.GetTodosAsync(filterById, filterByCompleted);
        todosToShow = allTodos;
    }

    private async Task RemoveTodo(int todoId)
    {
        Todo todoToRemove = todosToShow.First(t => t.TodoId == todoId);
        await CloudTodoService.RemoveTodoAsync(todoId);
        todosToShow.Remove(todoToRemove);
    }

    private async Task CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool)evt.Value;
        await CloudTodoService.UpdateTodoAsync(todo);
    } }
    
